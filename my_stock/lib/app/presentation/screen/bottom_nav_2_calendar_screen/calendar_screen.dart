import 'package:flutter/material.dart';import 'package:flutter_holo_date_picker/flutter_holo_date_picker.dart';import 'package:my_stock/app/presentation/screen/bottom_nav_2_calendar_screen/calendar_screen_view_model.dart';import 'package:my_stock/app/presentation/screen/bottom_nav_2_calendar_screen/date_emotion.dart';import 'package:my_stock/app/presentation/screen/bottom_nav_2_calendar_screen/record_emotion_screen/record_emotion_screen.dart';import 'package:my_stock/app/presentation/util/my_navigator.dart';import 'package:my_stock/app/presentation/util/my_snackbar.dart';import 'package:my_stock/core/theme/color_theme.dart';import 'package:my_stock/core/theme/text_theme.dart';import 'package:my_stock/core/util/date.dart';import 'package:my_stock/core/util/year_month.dart';import 'package:provider/provider.dart';part 'widget/calendar_date.dart';part 'widget/year_month_change_dialog.dart';bool isSameWeek(DateTime date1, DateTime date2) {  // 두 날짜 사이의 날짜 차이  var difference = date1.difference(date2).inDays;  // 한 주는 7일이므로 주차 차이를 계산  var weekDifference = (difference / 7).round();  // 두 날짜가 동일한 주에 있는지 확인  return weekDifference == 0;}class CalendarScreen extends StatelessWidget {  const CalendarScreen({super.key});  @override  Widget build(BuildContext context) {    return ChangeNotifierProvider(      create: (_) => CalendarScreenViewModel(),      child: Scaffold(        backgroundColor: BackgroundColor.defaultColor,        body: SafeArea(          child: SingleChildScrollView(            physics: const ClampingScrollPhysics(),            child: Padding(              padding: EdgeInsets.symmetric(horizontal: 14),              child: Column(                children: [                  const SizedBox(height: 23),                  Consumer<CalendarScreenViewModel>(builder: (context, viewModel, child) {                    return GestureDetector(                      behavior: HitTestBehavior.opaque,                      onTap: () {                        showDialog(                          context: context,                          builder: (innerContext) => Dialog(                            child: _YearMonthChangeDialog(                              selectedYearMonth: context.read<CalendarScreenViewModel>().yearMonth,                              onConfirm: context.read<CalendarScreenViewModel>().setYearMonth,                            ),                            shape: RoundedRectangleBorder(                              borderRadius: BorderRadius.circular(20),                            ),                          ),                          barrierDismissible: true,                        );                      },                      child: Row(                        mainAxisAlignment: MainAxisAlignment.center,                        mainAxisSize: MainAxisSize.min,                        children: [                          // 터치영역 확장용                          const SizedBox(width: 5),                          Text(                            "${viewModel.yearMonth.year}년 ${viewModel.yearMonth.month}월",                            style: HeaderTextStyle.nanum16.writeText,                          ),                          Padding(                            padding: const EdgeInsets.symmetric(horizontal: 10),                            child: Image.asset('assets/images/downward_arrow.png'),                          ),                          // 터치영역 확장용                          const SizedBox(width: 5),                        ],                      ),                    );                  }),                  const SizedBox(height: 25),                  _Calendar(),                  const SizedBox(height: 70),                  Container(                    width: double.infinity,                    height: 115,                    padding: EdgeInsets.symmetric(                      horizontal: 12,                      vertical: 16,                    ),                    decoration: BoxDecoration(                      color: BackgroundColor.white,                      border: Border.all(                        color: StrokeColor.writeText,                        width: 1,                      ),                      borderRadius: BorderRadius.circular(20),                    ),                  ),                  const SizedBox(height: 80),                ],              ),            ),          ),        ),      ),    );  }}class _Calendar extends StatelessWidget {  const _Calendar({super.key});  @override  Widget build(BuildContext context) {    return Container(      width: double.infinity,      child: Column(        crossAxisAlignment: CrossAxisAlignment.start,        children: [          Row(            children: [              Expanded(child: Center(child: Text("일"))),              const SizedBox(width: 3),              Expanded(child: Center(child: Text("월"))),              const SizedBox(width: 3),              Expanded(child: Center(child: Text("화"))),              const SizedBox(width: 3),              Expanded(child: Center(child: Text("수"))),              const SizedBox(width: 3),              Expanded(child: Center(child: Text("목"))),              const SizedBox(width: 3),              Expanded(child: Center(child: Text("금"))),              const SizedBox(width: 3),              Expanded(child: Center(child: Text("토"))),            ],          ),          const SizedBox(height: 20),          _CalendarBody(),        ],      ),    );  }}class _CalendarBody extends StatelessWidget {  const _CalendarBody({super.key});  @override  Widget build(BuildContext context) {    List<DateEmotionVM> list = context.watch<CalendarScreenViewModel>().dateEmotionList;    Map<Date, bool> isSelectedMap = context.watch<CalendarScreenViewModel>().isSelectedMap;    void Function(Date) onDateSelected =        context.read<CalendarScreenViewModel>().onCalendarDateSelected;    List<Widget> children = [];    void Function() fetchRecords = context.read<CalendarScreenViewModel>().fetchRecords;    List<Widget> rowChildren = [];    for (int i = 0; i < list.length; i++) {      rowChildren.add(        Expanded(          child: _CalendarDate(            dateEmotionVM: list[i],            isSelected: isSelectedMap[list[i].date] ?? false,            onTap: (Date date) async {              Date currentDate = Date.fromDateTime(DateTime.now());              bool sameWeek = isSameWeek(date.toDateTime(), currentDate.toDateTime());              if (!sameWeek) {                MySnackBar.show("이전 주는 기록할 수 없습니다.");                return;              }              onDateSelected(date);              await Future.delayed(Duration(milliseconds: 70));              MyNavigator.push(                RecordEmotionScreen(date: date),                name: "record",              ).then((value) {                fetchRecords();              });            },          ),        ),      );      rowChildren.add(const SizedBox(width: 3));      if (i % 7 == 6) {        rowChildren.removeLast();        children.add(Row(children: rowChildren));        // i가 마지막 인덱스가 아니면, 원소가 더 있을 것이다.        if (i != list.length - 1) children.add(const SizedBox(height: 15));        rowChildren = [];      }    }    if (rowChildren.isNotEmpty) {      children.add(Row(children: rowChildren));    }    return Column(children: children);  }}